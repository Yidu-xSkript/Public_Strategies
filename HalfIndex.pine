// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Yidu_A_S_O_T_L_J_C

//@version=5
indicator("HalfIndex", overlay=true)

// ht
string halfGroup = "Config . HalfTrend"
amplitude = input(title="Amplitude", defval=5, group=halfGroup)
channelDeviation = input(title="Channel Deviation", defval=2, group=halfGroup)
showChannels = input(title="Show Channels", group=halfGroup, defval=false)

// RSI
string rsiGroup = "Config . RSI"
alpha = input.float(title="Alpha", minval=0, maxval=1, step=0.1, defval=0.2, group=rsiGroup)
lookback = input.int(title="OB & OS Lookback", group=rsiGroup, defval=5)

src = close

// ht
var int trend = 0
var int nextTrend = 0
var float maxLowPrice = nz(low[1], low)
var float minHighPrice = nz(high[1], high)

var float up = 0.0
var float down = 0.0
float atrHigh = 0.0
float atrLow = 0.0

atr2 = ta.atr(100) / 2
dev = channelDeviation * atr2

highPrice = high[math.abs(ta.highestbars(amplitude))]
lowPrice = low[math.abs(ta.lowestbars(amplitude))]
highma = ta.sma(high, amplitude)
lowma = ta.sma(low, amplitude)

if nextTrend == 1
	maxLowPrice := math.max(lowPrice, maxLowPrice)

	if highma < maxLowPrice and close < nz(low[1], low)
		trend := 1
		nextTrend := 0
		minHighPrice := highPrice
else
	minHighPrice := math.min(highPrice, minHighPrice)

	if lowma > minHighPrice and close > nz(high[1], high)
		trend := 0
		nextTrend := 1
		maxLowPrice := lowPrice

if trend == 0
	if not na(trend[1]) and trend[1] != 0
		up := na(down[1]) ? down : down[1]
	else
		up := na(up[1]) ? maxLowPrice : math.max(maxLowPrice, up[1])
	atrHigh := up + dev
	atrLow := up - dev
else
	if not na(trend[1]) and trend[1] != 1 
		down := na(up[1]) ? up : up[1]
	else
		down := na(down[1]) ? minHighPrice : math.min(minHighPrice, down[1])
	atrHigh := down + dev
	atrLow := down - dev

ht = trend == 0 ? up : down

htUpCondition = trend == 0
htDnCondition = trend == 1

// RSI
gamma=1-alpha
L0 = 0.0
L0 := (1-gamma) * src + gamma * nz(L0[1])

L1 = 0.0
L1 := -gamma * L0 + nz(L0[1]) + gamma * nz(L1[1])

L2 = 0.0
L2 := -gamma * L1 + nz(L1[1]) + gamma * nz(L2[1])

L3 = 0.0
L3 := -gamma * L2 + nz(L2[1]) + gamma * nz(L3[1])

cu= (L0>L1 ? L0-L1 : 0) + (L1>L2 ? L1-L2 : 0) + (L2>L3 ? L2-L3 : 0)
cd= (L0<L1 ? L1-L0 : 0) + (L1<L2 ? L2-L1 : 0) + (L2<L3 ? L3-L2 : 0)

temp= cu+cd==0 ? -1 : cu+cd
LaRSI=temp==-1 ? 0 : cu/temp

var bool upLB = false
var bool dnLB = false

for i=1 to lookback
    upLB := 100*LaRSI[i] > 80
    dnLB := 100*LaRSI[i] < 20

rsiDnCondition = upLB and 100*LaRSI < 80
rsiUpCondition = dnLB and 100*LaRSI > 20

// signal
var bool upSignalIssued = false
var bool dnSignalIssued = false

upSignal = htUpCondition and rsiUpCondition and barstate.isconfirmed and not upSignalIssued
dnSignal = htDnCondition and rsiDnCondition and barstate.isconfirmed and not dnSignalIssued

if upSignal
    upSignalIssued := true
    alert("HalfIndex (Buy)", alert.freq_once_per_bar_close)

if dnSignal
    dnSignalIssued := true
    alert("HalfIndex (Sell)", alert.freq_once_per_bar_close)
    

if upSignalIssued and 100*LaRSI > 80
    upSignalIssued := false
if dnSignalIssued and htUpCondition
    dnSignalIssued := 100*LaRSI < 20

// plot
htColor = trend == 0 ? color.green : color.red
htPlot = plot(ht, title="HalfTrend", linewidth=2, color=htColor)
atrHighPlot = plot(showChannels ? atrHigh : na, title="ATR High", style=plot.style_circles, color=color.red)
atrLowPlot = plot(showChannels ? atrLow : na, title="ATR Low", style=plot.style_circles, color=color.green)
fill(htPlot, atrHighPlot, title="ATR High Ribbon", color=color.new(color.red, 80))
fill(htPlot, atrLowPlot, title="ATR Low Ribbon", color=color.new(color.green, 80))


plotshape(upSignal ? bar_index : na, title="Arrow Up", style=shape.triangleup, location=location.belowbar, size=size.tiny, color=color.green)
plotshape(dnSignal ? bar_index : na, title="Arrow Dn", style=shape.triangledown, location=location.abovebar, size=size.tiny, color=color.red)